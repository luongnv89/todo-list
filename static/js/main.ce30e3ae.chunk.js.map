{"version":3,"sources":["reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","containers/FilterLink.js","components/Footer.js","containers/TodoCounting.js","containers/App.js","containers/Root.js","serviceWorker.js","index.js","actions/index.js"],"names":["todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","text","completed","filter","t","index","map","todo","assign","VisibilityFilters","require","visibilityFilter","SHOW_ALL","combineReducers","AddTodo","_ref","input","dispatch","react_default","a","createElement","onSubmit","e","preventDefault","value","trim","addTodo","className","ref","node","placeholder","style","marginLeft","onClick","removeAllTodos","connect","Todo","toggleTodo","removeTodo","scope","textDecoration","TodoList","marginTop","components_Todo","key","getVisibleTodos","VisibleTodoList","ownProps","id","FilterLink","children","react_router_dom","exact","to","activeStyle","color","Footer","total","totalActive","totalCompleted","containers_FilterLink","SHOW_ACTIVE","SHOW_COMPLETED","TodoCounting","App","params","match","containers_AddTodo","containers_VisibleTodoList","containers_TodoCounting","Root","store","es","react_router","path","component","Boolean","window","location","hostname","loggerMiddleware","createLogger","createStore","todoApp","applyMiddleware","ReactDOM","render","containers_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","setVisibilityFilter"],"mappings":"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","file":"static/js/main.ce30e3ae.chunk.js","sourcesContent":["function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'REMOVE_TODO':\n      return state.filter((t, index) => action.index !== index);\n    case 'REMOVE_ALL_TODOS':\n      return [];\n    case 'TOGGLE_TODO':\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          return Object.assign({}, todo, {\n            completed: !todo.completed\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n\nexport default todos;","const {\n  VisibilityFilters,\n} = require('../actions');\n\nfunction visibilityFilter(state = VisibilityFilters.SHOW_ALL, action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, removeAllTodos } from '../actions';\n\nlet AddTodo = ({ dispatch }) => {\n  let input;\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (!input.value.trim()) {\n            return;\n          }\n          dispatch(addTodo(input.value));\n          input.value = ''\n        }}\n      >\n        <div className=\"form-group\">\n          <input\n            className=\"form-control\"\n            ref={node => {\n              input = node\n            }}\n            placeholder=\"Enter task name\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"btn btn-success btn-small\"\n        >\n          Add Todo\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger btn-small\"\n          style={{marginLeft:'20px'}}\n          onClick={() => dispatch(removeAllTodos())}\n        >\n          Clear All\n        </button>\n      </form>\n    </div>\n  );\n}\n\nAddTodo = connect()(AddTodo);\nexport default AddTodo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Todo = ({ toggleTodo, removeTodo, completed, text, index }) => (\n  <tr>\n    <th scope=\"row\">{index}</th>\n    <th onClick={toggleTodo}>\n      <span\n        style={{ textDecoration: completed ? \"line-through\" : 'none' }}\n        className={`text-${completed ? 'danger':'success'}`}\n      >\n        {text}\n      </span>\n    </th>\n    <th>\n      <button\n        onClick={removeTodo}\n        className=\"btn btn-outline-danger btn-small\"\n      >\n        <i\n          className=\"fas fa-trash\"\n        />\n      </button>\n    </th>\n  </tr>\n);\n\nTodo.propTypes = {\n  toggleTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n}\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({todos, toggleTodo, removeTodo}) => (\n  <div className=\"card\" style={{marginTop: '30px'}}>\n    <div className=\"card-header\">\n      Todo List\n    </div>\n    <div className=\"card-body table-responsive\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map((todo, index) => (\n            <Todo\n              key={index} {...todo}\n              toggleTodo={() => toggleTodo(index)}\n              removeTodo={() => removeTodo(index)}\n              index={index}\n            />)\n          )}\n        </tbody>\n      </table>\n    </div>\n  </div>\n);\n\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id:PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\n\nexport default TodoList;","import { connect } from 'react-redux';\nimport { toggleTodo, removeTodo } from '../actions';\nimport TodoList from '../components/TodoList';\n\nconst getVisibleTodos = ( todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed);\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed);\n    default:\n      return todos;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    todos: getVisibleTodos(state.todos, ownProps.filter)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleTodo: id => {\n      dispatch(toggleTodo(id))\n    },\n    removeTodo: id => {\n      dispatch(removeTodo(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default VisibleTodoList;","// import { connect} from 'react-redux';\n// import { setVisibilityFilter } from '../actions';\n// import Link from '../components/Link';\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst FilterLink = ({ filter, children }) => (\n  <NavLink\n    exact\n    to={filter === 'SHOW_ALL' ? '/' : `/${filter}`}\n    activeStyle={{\n      textDecoration: 'none',\n      color: 'black'\n    }}\n  >\n    {children}\n  </NavLink>\n)\n\n// const mapStateToProps = (state , ownProps) => {\n//   return {\n//     active: ownProps.filter === state.visibilityFilter,\n//   }\n// }\n\n// const mapDispatchToProps = ( dispatch, ownProps) => {\n//   return {\n//     onClick: () => {\n//       dispatch(setVisibilityFilter(ownProps.filter))\n//     }\n//   }\n// }\n\n// const FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link);\n\nexport default FilterLink;","import React from \"react\";\nimport FilterLink from \"../containers/FilterLink\";\nimport { VisibilityFilters } from \"../actions\";\n\nconst Footer = ({total, totalActive, totalCompleted}) => (\n  <p>\n    Show:{\" \"}\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>\n      {\" \"}\n      <span className=\"badge badge-light\">All {total}</span>{\" \"}\n    </FilterLink>\n    {\", \"}\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\n      {\" \"}\n      <span className=\"badge badge-success\"> Active {totalActive}</span>{\" \"}\n    </FilterLink>\n    {\", \"}\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\n      {\" \"}\n      <span className=\"badge badge-danger\">Completed {totalCompleted}</span>\n    </FilterLink>\n  </p>\n);\n\nexport default Footer;\n","import { connect } from 'react-redux';\nimport Footer from '../components/Footer';\n\nconst mapStateToProps = state => {\n  return {\n    total: state.todos.length,\n    totalActive: state.todos.filter(t => !t.completed).length,\n    totalCompleted: state.todos.filter(t => t.completed).length,\n  }\n}\n\nconst TodoCounting = connect(mapStateToProps)(Footer);\n\nexport default TodoCounting;","import React from \"react\";\nimport \"../App.css\";\nimport AddTodo from \"./AddTodo\";\nimport VisibleTodoList from \"./VisibleTodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport TodoCounting from \"./TodoCounting\";\n\nconst App = ({match: {params}}) => (\n  <div className=\"App\">\n    <AddTodo />\n    <VisibleTodoList filter={params.filter || 'SHOW_ALL'}/>\n    <TodoCounting />\n  </div>\n);\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    <Router>\n      <Route path='/:filter?' component={App} />\n    </Router>\n  </Provider>\n)\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n}\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from 'redux-logger';\nimport todoApp from \"./reducers\";\nimport Root from \"./containers/Root\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst loggerMiddleware = createLogger();\nconst store = createStore(todoApp, applyMiddleware(loggerMiddleware));\n\nReactDOM.render(<Root store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n\nconst addTodo = (text) => ({\n  type: 'ADD_TODO',\n  text,\n});\n\nconst removeTodo = (index) => ({\n  type: 'REMOVE_TODO',\n  index,\n});\n\nconst removeAllTodos = () => ({\n  type: 'REMOVE_ALL_TODOS',\n});\n\nconst toggleTodo = (index) => ({\n  type: 'TOGGLE_TODO',\n  index,\n});\n\nconst setVisibilityFilter = (filter) => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter,\n});\n\nmodule.exports = {\n  setVisibilityFilter,\n  addTodo,\n  removeTodo,\n  toggleTodo,\n  VisibilityFilters,\n  removeAllTodos,\n};"],"sourceRoot":""}