{"version":3,"sources":["clientStorage/localStorage.js","actions/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","selectors/index.js","containers/VisibleTodoList.js","containers/FilterLink.js","components/Footer.js","containers/TodoCounting.js","containers/App.js","containers/Root.js","serviceWorker.js","reducers/todos.js","reducers/sortTodos.js","reducers/clientStorage.js","reducers/index.js","sagas/loadTodoSaga.js","sagas/saveTodoSaga.js","sagas/index.js","configStore.js","index.js"],"names":["module","exports","saveObject","key","value","localStorage","setItem","JSON","stringify","getObject","parse","getItem","deleteObject","removeItem","VisibilityFilters","addTodo","createAction","removeTodo","removeAllTodos","toggleTodo","sortTodos","fetchTodoRequest","fetchTodoReceived","fetchTodoFailed","saveTodoRequest","saveTodoReceived","saveTodoFailed","AddTodo","_ref","input","todos","dispatch","react_default","a","createElement","onSubmit","e","preventDefault","trim","className","ref","node","placeholder","type","onClick","connect","state","Todo","completed","text","id","createdAt","index","scope","style","textDecoration","concat","Date","toLocaleString","TodoList","changeTodoOrder","marginTop","map","todo","components_Todo","Object","assign","sortTodoList","createSelector","order","console","log","toConsumableArray","sort","b","getVisibilityFilter","filter","t","VisibleTodoList","ownProps","FilterLink","filterLink","children","react_router_dom","exact","to","Footer","total","totalActive","totalCompleted","containers_FilterLink","TodoCounting","length","App","params","match","containers_AddTodo","containers_VisibleTodoList","containers_TodoCounting","Root","store","es","react_router","path","component","Boolean","window","location","hostname","createReducer","_createReducer","defineProperty","produce","draft","todoFromCS","push","now","clientStorage_createReducer","fetching","error","saving","combineReducers","status","workerSaga","watcherSaga","regenerator_default","wrap","_context","prev","next","ls","put","t0","stop","_marked","_context2","takeLatest","_marked2","action","payload","saveTodoSaga_marked","saveTodoSaga_marked2","rootSaga","all","fork","watcherLoadTodoSaga","watcherSaveTodoSaga","sagas_marked","sagaMiddleware","createSagaMiddleware","loggerMiddleware","createLogger","duration","collapsed","createStore","todoApp","composeWithDevTools","applyMiddleware","run","ReactDOM","render","containers_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d90dde25.chunk.js","sourcesContent":["/**\n * Work with localStorage\n */\n\nconst saveObject = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n\nconst getObject = (key) => {\n  return JSON.parse(localStorage.getItem(key));\n}\n\nconst deleteObject = (key) => {\n  localStorage.removeItem(key);\n}\n\nmodule.exports = {\n  saveObject,\n  getObject,\n  deleteObject,\n};\n","import { createAction } from 'redux-act';\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n\nexport const addTodo = createAction('ADD_TODO');\nexport const removeTodo = createAction('REMOVE_TODO');\nexport const removeAllTodos = createAction('REMOVE_ALL_TODOS');\nexport const toggleTodo = createAction('TOGGLE_TODO');\nexport const sortTodos = createAction('SORT_TODOS');\n// Offline - first\nexport const fetchTodoRequest = createAction('FETCH_TODO_REQUEST');\nexport const fetchTodoReceived = createAction('FETCH_TODO_RECEIVED');\nexport const fetchTodoFailed = createAction('FETCH_TODO_FAILED');\n\nexport const saveTodoRequest = createAction('SAVE_TODO_REQUEST');\nexport const saveTodoReceived = createAction('SAVE_TODO_RECEIVED');\nexport const saveTodoFailed = createAction('SAVE_TODO_FAILED');\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, removeAllTodos, fetchTodoRequest, saveTodoRequest } from '../actions';\n/* jshint ignore:start */\nlet AddTodo = ({ todos, dispatch }) => {\n  let input;\n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          if (!input.value.trim()) {\n            return;\n          }\n          dispatch(addTodo(input.value));\n          input.value = '';\n        }}\n      >\n        <div className=\"form-group\">\n          <input\n            className=\"form-control\"\n            ref={(node) => {\n              input = node;\n            }}\n            placeholder=\"Enter task name\"\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-success btn-small\">\n          <i className=\"fas fa-plus\"/> Add Todo\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger btn-small btnTodo\"\n          onClick={() => dispatch(removeAllTodos())}\n        >\n          <i className=\"fas fa-eraser\"/> Clear All\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-info btn-small btnTodo\"\n          onClick={() => dispatch(fetchTodoRequest())}\n        >\n          <i className=\"fas fa-upload\"/> Load From Browser\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-info btn-small btnTodo\"\n          onClick={() => dispatch(saveTodoRequest(todos))}\n        >\n          <i className=\"fas fa-download\"/> Save To Browser\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos,\n  };\n};\n\nAddTodo = connect(mapStateToProps)(AddTodo);\nexport default AddTodo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n/* jshint ignore:start */\nconst Todo = ({ toggleTodo, removeTodo, completed, text, id, createdAt, index }) => (\n  <tr>\n    <th scope=\"row\">{index}</th>\n    <th onClick={() => toggleTodo(id)}>\n      <span\n        style={{ textDecoration: completed ? 'line-through' : 'none' }}\n        className={`text-${completed ? 'danger' : 'success'} todo-text`}\n      >\n        {text}\n      </span>\n    </th>\n    <th>\n      <span\n        className=\"font-weight-lighter\"\n        style={{ textDecoration: completed ? 'line-through' : 'none' }}\n      >\n        {(new Date(createdAt)).toLocaleString()}\n      </span>\n    </th>\n    <th>\n      <button onClick={() => removeTodo(id)} className=\"btn btn-outline-danger btn-small\">\n        <i className=\"fas fa-trash\" />\n      </button>\n    </th>\n  </tr>\n);\n\nTodo.propTypes = {\n  toggleTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  createdAt: PropTypes.number.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n/* jshint ignore:start */\nconst TodoList = ({ todos, toggleTodo, removeTodo, changeTodoOrder }) => (\n  <div className=\"card\" style={{ marginTop: '30px' }}>\n    <div className=\"card-header\">Todo List</div>\n    <div className=\"card-body table-responsive\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\" onClick={changeTodoOrder}>\n              Created Time\n            </th>\n            <th scope=\"col\">Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map((todo, index) => (\n            <Todo\n              key={todo.id}\n              {...todo}\n              toggleTodo={toggleTodo}\n              removeTodo={removeTodo}\n              index={index}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired,\n      createdAt: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  sortTodos: PropTypes.bool.isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  changeTodoOrder: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import { createSelector } from 'reselect';\n\nconst orderList = (state) => state.sortTodos;\n\nconst getTodos = (state) => state.todos;\n\nexport const sortTodoList =  createSelector(\n  [orderList, getTodos],\n  (order, todos) => {\n    if (order) {\n      console.log('Going to order: ', order);\n      return [...todos].sort((a,b) => (b.createdAt - a.createdAt));\n    } else {\n      console.log('Going to order (2): ', order);\n      return [...todos].sort((a,b) => (a.createdAt - b.createdAt));\n    }\n  }\n);","import { connect } from 'react-redux';\nimport { toggleTodo, removeTodo, sortTodos } from '../actions';\nimport TodoList from '../components/TodoList';\nimport { sortTodoList } from '../selectors';\n\nconst getVisibilityFilter = (todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_COMPLETED':\n      return todos.filter((t) => t.completed);\n    case 'SHOW_ACTIVE':\n      return todos.filter((t) => !t.completed);\n    default:\n      return todos;\n  }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    todos: getVisibilityFilter(sortTodoList(state), ownProps.filter),\n    sortTodos: state.sortTodos,\n  };\n};\n/* jshint ignore:start */\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toggleTodo: (id) => {\n      dispatch(toggleTodo(id));\n    },\n    removeTodo: (id) => {\n      dispatch(removeTodo(id));\n    },\n    changeTodoOrder: () => {\n      dispatch(sortTodos());\n    },\n  };\n};\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoList);\n\nexport default VisibleTodoList;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n/* jshint ignore:start */\nconst FilterLink = ({ filterLink, children }) => (\n  <NavLink\n    exact\n    to={filterLink === 'SHOW_ALL' ? '/' : `/${filterLink}`}\n  >\n    {children}\n  </NavLink>\n);\n\nexport default FilterLink;\n","import React from 'react';\nimport FilterLink from '../containers/FilterLink';\nimport { VisibilityFilters } from '../actions';\n/* jshint ignore:start */\nconst Footer = ({ total, totalActive, totalCompleted, filter }) => (\n  <div style={{marginTop: '20px'}}>\n    <FilterLink filterLink={VisibilityFilters.SHOW_ALL}>\n      <span className={`btn btn-sm btnTodo btn-light ${filter === VisibilityFilters.SHOW_ALL ? 'font-weight-bolder': ''}`}>All {total}</span>{' '}\n    </FilterLink>\n    <FilterLink filterLink={VisibilityFilters.SHOW_ACTIVE}>\n      <span className={`btn btn-sm btnTodo btn-success ${filter === VisibilityFilters.SHOW_ACTIVE ? 'font-weight-bolder': ''}`}> Active {totalActive}</span>{' '}\n    </FilterLink>\n    <FilterLink filterLink={VisibilityFilters.SHOW_COMPLETED}>\n      <span className={`btn btn-sm btnTodo btn-danger ${filter === VisibilityFilters.SHOW_COMPLETED ? 'font-weight-bolder': ''}`}>Completed {totalCompleted}</span>\n    </FilterLink>\n  </div>\n);\n\nexport default Footer;\n","import { connect } from 'react-redux';\nimport Footer from '../components/Footer';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    total: state.todos.length,\n    totalActive: state.todos.filter((t) => !t.completed).length,\n    totalCompleted: state.todos.filter((t) => t.completed).length,\n    filter: ownProps.filter,\n  };\n};\n\nconst TodoCounting = connect(mapStateToProps)(Footer);\n\nexport default TodoCounting;\n","import React from 'react';\nimport '../App.css';\nimport AddTodo from './AddTodo';\nimport VisibleTodoList from './VisibleTodoList';\nimport TodoCounting from './TodoCounting';\n/* jshint ignore:start */\nconst App = ({ match: { params } }) => (\n  <div className=\"App\">\n    <AddTodo />\n    <VisibleTodoList filter={params.filter || 'SHOW_ALL'} />\n    <TodoCounting />\n  </div>\n);\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\n/* jshint ignore:start */\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    <Router>\n      <Route path=\"/:filter?\" component={App} />\n    </Router>\n  </Provider>\n);\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired,\n};\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createReducer } from 'redux-act';\nimport { addTodo, removeTodo, toggleTodo, removeAllTodos, fetchTodoReceived } from '../actions';\nimport produce from 'immer';\n\nconst initialState = [];\n/* jshint ignore:start */\nexport default createReducer(\n  {\n    [fetchTodoReceived]: produce((draft, todoFromCS) => todoFromCS ),\n    [addTodo]: produce((draft, text) => {\n      draft.push({ id: draft.length, text, completed: false, createdAt: Date.now() });\n    }),\n    [removeTodo]: (todos, id) => todos.filter((t) => id !== t.id),\n    [removeAllTodos]: (todos) => [],\n    [toggleTodo]: produce((draft, id) => {\n      draft.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      });\n    }),\n  },\n  initialState,\n);\n\n// export default createReducer((on, off) => {\n//   on(addTodo, (todos, text) => [...todos, { text: text, completed: false }]);\n//   on(removeTodo, (todos, id) => todos.filter((t, index) => id !== index));\n//   on(removeAllTodos,todos => []);\n//   on(toggleTodo, (todos, id) =>\n//       todos.map((todo, index) => {\n//         if (index === id) {\n//           return Object.assign({}, todo, {\n//             completed: !todo.completed\n//           });\n//         }\n//         return todo;\n//       }));\n// }, initialState);\n","import { createReducer } from 'redux-act';\nimport { sortTodos } from '../actions';\nimport produce from 'immer';\n\nconst initialState = true;\n/* jshint ignore:start */\nexport default createReducer(\n  {\n    [sortTodos]: produce((draft) => (draft = !draft)),\n  },\n  initialState,\n);\n","import { createReducer } from 'redux-act';\nimport {\n  fetchTodoReceived,\n  fetchTodoRequest,\n  fetchTodoFailed,\n  saveTodoReceived,\n  saveTodoRequest,\n  saveTodoFailed,\n} from '../actions';\n\nconst initialState = {\n  fetching: false,\n  saving: false,\n  error: null,\n};\n/* jshint ignore:start */\nexport default createReducer(\n  {\n    [fetchTodoReceived]: (state) => ({ fetching: false }),\n    [fetchTodoRequest]: (state) => ({ fetching: true }),\n    [fetchTodoFailed]: (state, error) => ({ error }),\n    [saveTodoReceived]: (state) => ({ saving: false }),\n    [saveTodoRequest]: (state) => ({ saving: true }),\n    [saveTodoFailed]: (state, error) => ({ error }),\n  },\n  initialState,\n);\n\n// export default createReducer((on, off) => {\n//   on(addTodo, (todos, text) => [...todos, { text: text, completed: false }]);\n//   on(removeTodo, (todos, id) => todos.filter((t, index) => id !== index));\n//   on(removeAllTodos,todos => []);\n//   on(toggleTodo, (todos, id) =>\n//       todos.map((todo, index) => {\n//         if (index === id) {\n//           return Object.assign({}, todo, {\n//             completed: !todo.completed\n//           });\n//         }\n//         return todo;\n//       }));\n// }, initialState);\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport sortTodos from './sortTodos';\nimport status from './clientStorage';\n\nexport default combineReducers({ todos, sortTodos, status });\n","import { takeLatest, put } from 'redux-saga/effects';\nimport * as ls from '../clientStorage/localStorage';\nimport { fetchTodoReceived, fetchTodoFailed} from '../actions';\n// worker saga: makes the api call when watcher saga sees the action\nfunction* workerSaga() {\n  try {\n    const todos = ls.getObject('TODO-LIST');\n    // dispatch a success action to the store with the new dog\n    yield put(fetchTodoReceived(todos));\n  } catch (error) {\n    // dispatch a failure action to the store with the error\n    yield put(fetchTodoFailed(error));\n  }\n}\n\n// watcher saga: watches for actions dispatched to the store, starts worker saga\nexport default function* watcherSaga() {\n  yield takeLatest('FETCH_TODO_REQUEST', workerSaga);\n}\n","import { takeLatest, put } from 'redux-saga/effects';\nimport * as ls from '../clientStorage/localStorage';\nimport { fetchTodoReceived, fetchTodoFailed} from '../actions';\n// worker saga: makes the api call when watcher saga sees the action\nfunction* workerSaga(action) {\n  try {\n    console.log(fetchTodoFailed, fetchTodoReceived);\n    ls.saveObject('TODO-LIST', action.payload);\n    // dispatch a success action to the store with the new dog\n    yield put({type: 'SAVE_TODO_RECEIVED'});\n  } catch (error) {\n    // dispatch a failure action to the store with the error\n    yield put({type: 'SAVE_TODO_FALED', error});\n  }\n}\n\n// watcher saga: watches for actions dispatched to the store, starts worker saga\nexport default function* watcherSaga() {\n  yield takeLatest('SAVE_TODO_REQUEST', workerSaga);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport watcherLoadTodoSaga from './loadTodoSaga';\nimport watcherSaveTodoSaga from './saveTodoSaga';\n\nexport default function* rootSaga() {\n  yield all([fork(watcherLoadTodoSaga), fork(watcherSaveTodoSaga)]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport todoApp from './reducers';\nimport rootSaga from './sagas';\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n/* jshint ignore:start */\nconst loggerMiddleware = createLogger({\n  duration: true,\n  collapsed: true,\n});\n\nconst store = createStore(todoApp, composeWithDevTools(applyMiddleware(loggerMiddleware, sagaMiddleware)));\n// run the saga\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport Root from './containers/Root';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './configStore';\n\nReactDOM.render(<Root store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}