{"version":3,"sources":["actions/index.js","logo.svg","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setVisibilityFilter","filter","type","addTodo","text","toggleTodo","index","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","__webpack_require__","p","todos","state","arguments","length","undefined","action","concat","Object","toConsumableArray","completed","map","todo","assign","require","visibilityFilter","combineReducers","Link","_ref","active","children","onClick","react_default","a","createElement","href","e","preventDefault","FilterLink","connect","ownProps","dispatch","Footer","containers_FilterLink","AddTodo","input","onSubmit","value","trim","ref","node","Todo","style","textDecoration","TodoList","onTodoClick","components_Todo","key","getVisibleTodos","t","VisibleTodoList","id","App","className","containers_AddTodo","containers_VisibleTodoList","components_Footer","Boolean","window","location","hostname","match","store","createStore","todoApp","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b185e85c.chunk.js","sourcesContent":["const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n\nconst addTodo = (text) => ({\n  type: 'ADD_TODO',\n  text,\n});\n\nconst toggleTodo = (index) => ({\n  type: 'TOGGLE_TODO',\n  index,\n});\n\nconst setVisibilityFilter = (filter) => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter,\n});\n\nmodule.exports = {\n  setVisibilityFilter,\n  addTodo,\n  toggleTodo,\n  VisibilityFilters,\n};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          return Object.assign({}, todo, {\n            completed: !todo.completed\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n\nexport default todos;","const {\n  VisibilityFilters,\n} = require('../actions');\n\nfunction visibilityFilter(state = VisibilityFilters.SHOW_ALL, action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n})","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Link = ({ active, children, onClick }) => {\n  if (active) {\n    return <span>{children}</span>\n  }\n\n  return (\n    <a\n      href=\"\"\n      onClick={(e) => {\n        e.preventDefault();\n        onClick()\n      }}\n    >\n    {children}\n    </a>\n  )\n}\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Link;","import { connect} from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\nimport Link from '../components/Link';\n\nconst mapStateToProps = (state , ownProps) => {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n\nconst mapDispatchToProps = ( dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n\nconst FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link);\n\nexport default FilterLink;","import React from \"react\";\nimport FilterLink from '../containers/FilterLink';\nimport { VisibilityFilters } from '../actions';\n\nconst Footer = () => (\n  <p>\n    Show: <FilterLink filter={VisibilityFilters.SHOW_ALL}> All </FilterLink>\n    {', '}\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}> Active </FilterLink>\n    {', '}\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}> Completed </FilterLink>\n  </p>\n)\n\nexport default Footer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\n\nlet AddTodo = ({ dispatch }) => {\n  let input;\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (!input.value.trim()) {\n            return;\n          }\n          dispatch(addTodo(input.value));\n          input.value = ''\n        }}\n      >\n        <input\n          ref={node => {\n            input = node\n          }}\n        />\n        <button\n          type=\"submit\"\n        >\n          Add Todo\n        </button>\n      </form>\n    </div>\n  );\n}\n\nAddTodo = connect()(AddTodo);\nexport default AddTodo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li\n    onClick={onClick}\n    style={{ textDecoration: completed ? \"line-through\" : 'none' }}\n  >\n    {text}\n  </li>\n);\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n}\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({todos, onTodoClick}) => (\n  <ul>\n    {todos.map((todo, index) => (\n      <Todo\n        key={index} {...todo}\n        onClick={() => onTodoClick(index)}\n      />)\n    )}\n  </ul>\n);\n\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id:PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onTodoClick: PropTypes.func.isRequired,\n};\n\n\nexport default TodoList;","import { connect } from 'react-redux';\nimport { toggleTodo } from '../actions';\nimport TodoList from '../components/TodoList';\n\nconst getVisibleTodos = ( todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed);\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed);\n    default:\n      return todos;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTodoClick: id => {\n      dispatch(toggleTodo(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default VisibleTodoList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Footer from './components/Footer';\nimport AddTodo from './containers/AddTodo';\nimport VisibleTodoList from './containers/VisibleTodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AddTodo />\n      <VisibleTodoList />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore }  from 'redux';\nimport todoApp from './reducers';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(todoApp);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}