{"version":3,"sources":["actions/index.js","logo.svg","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/TodoCounting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setVisibilityFilter","filter","type","addTodo","text","removeTodo","index","toggleTodo","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","removeAllTodos","__webpack_require__","p","todos","state","arguments","length","undefined","action","concat","Object","toConsumableArray","completed","t","map","todo","assign","require","visibilityFilter","combineReducers","AddTodo","_ref","input","dispatch","react_default","a","createElement","onSubmit","e","preventDefault","value","trim","className","ref","node","placeholder","style","marginLeft","onClick","connect","Todo","scope","textDecoration","TodoList","marginTop","components_Todo","key","getVisibleTodos","VisibleTodoList","id","Link","active","children","href","FilterLink","ownProps","Footer","total","totalActive","totalCompleted","containers_FilterLink","TodoCounting","App","containers_AddTodo","containers_VisibleTodoList","containers_TodoCounting","Boolean","window","location","hostname","match","store","createStore","todoApp","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93d2e3f2.chunk.js","sourcesContent":["const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n\nconst addTodo = (text) => ({\n  type: 'ADD_TODO',\n  text,\n});\n\nconst removeTodo = (index) => ({\n  type: 'REMOVE_TODO',\n  index,\n});\n\nconst removeAllTodos = () => ({\n  type: 'REMOVE_ALL_TODOS',\n});\n\nconst toggleTodo = (index) => ({\n  type: 'TOGGLE_TODO',\n  index,\n});\n\nconst setVisibilityFilter = (filter) => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter,\n});\n\nmodule.exports = {\n  setVisibilityFilter,\n  addTodo,\n  removeTodo,\n  toggleTodo,\n  VisibilityFilters,\n  removeAllTodos,\n};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'REMOVE_TODO':\n      return state.filter((t, index) => action.index !== index);\n    case 'REMOVE_ALL_TODOS':\n      return [];\n    case 'TOGGLE_TODO':\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          return Object.assign({}, todo, {\n            completed: !todo.completed\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n\nexport default todos;","const {\n  VisibilityFilters,\n} = require('../actions');\n\nfunction visibilityFilter(state = VisibilityFilters.SHOW_ALL, action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, removeAllTodos } from '../actions';\n\nlet AddTodo = ({ dispatch }) => {\n  let input;\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          if (!input.value.trim()) {\n            return;\n          }\n          dispatch(addTodo(input.value));\n          input.value = ''\n        }}\n      >\n        <div className=\"form-group\">\n          <input\n            className=\"form-control\"\n            ref={node => {\n              input = node\n            }}\n            placeholder=\"Enter task name\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className=\"btn btn-success btn-small\"\n        >\n          Add Todo\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger btn-small\"\n          style={{marginLeft:'20px'}}\n          onClick={() => dispatch(removeAllTodos())}\n        >\n          Clear All\n        </button>\n      </form>\n    </div>\n  );\n}\n\nAddTodo = connect()(AddTodo);\nexport default AddTodo;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Todo = ({ toggleTodo, removeTodo, completed, text, index }) => (\n  <tr>\n    <th scope=\"row\">{index}</th>\n    <th onClick={toggleTodo}>\n      <span\n        style={{ textDecoration: completed ? \"line-through\" : 'none' }}\n        className={`text-${completed ? 'danger':'success'}`}\n      >\n        {text}\n      </span>\n    </th>\n    <th>\n      <button\n        onClick={removeTodo}\n        className=\"btn btn-outline-danger btn-small\"\n      >\n        <i\n          className=\"fas fa-trash\"\n        />\n      </button>\n    </th>\n\n\n  </tr>\n);\n\nTodo.propTypes = {\n  toggleTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n}\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({todos, toggleTodo, removeTodo}) => (\n  <div className=\"card\" style={{marginTop: '30px'}}>\n    <div className=\"card-header\">\n      Todo List\n    </div>\n    <div className=\"card-body table-responsive\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map((todo, index) => (\n            <Todo\n              key={index} {...todo}\n              toggleTodo={() => toggleTodo(index)}\n              removeTodo={() => removeTodo(index)}\n              index={index}\n            />)\n          )}\n        </tbody>\n      </table>\n    </div>\n  </div>\n);\n\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id:PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n\n\nexport default TodoList;","import { connect } from 'react-redux';\nimport { toggleTodo, removeTodo } from '../actions';\nimport TodoList from '../components/TodoList';\n\nconst getVisibleTodos = ( todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos;\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed);\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed);\n    default:\n      return todos;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleTodo: id => {\n      dispatch(toggleTodo(id))\n    },\n    removeTodo: id => {\n      dispatch(removeTodo(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n\nexport default VisibleTodoList;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Link = ({ active, children, onClick }) => {\n  if (active) {\n    return <span>{children}</span>\n  }\n\n  return (\n    <a\n      href=\"\"\n      onClick={(e) => {\n        e.preventDefault();\n        onClick()\n      }}\n    >\n    {children}\n    </a>\n  )\n}\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Link;","import { connect} from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\nimport Link from '../components/Link';\n\nconst mapStateToProps = (state , ownProps) => {\n  return {\n    active: ownProps.filter === state.visibilityFilter,\n  }\n}\n\nconst mapDispatchToProps = ( dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n\nconst FilterLink = connect(mapStateToProps, mapDispatchToProps)(Link);\n\nexport default FilterLink;","import React from \"react\";\nimport FilterLink from \"../containers/FilterLink\";\nimport { VisibilityFilters } from \"../actions\";\n\nconst Footer = ({total, totalActive, totalCompleted}) => (\n  <p>\n    Show:{\" \"}\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>\n      {\" \"}\n      <span className=\"badge badge-light\">All {total}</span>{\" \"}\n    </FilterLink>\n    {\", \"}\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\n      {\" \"}\n      <span className=\"badge badge-success\"> Active {totalActive}</span>{\" \"}\n    </FilterLink>\n    {\", \"}\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\n      {\" \"}\n      <span className=\"badge badge-danger\">Completed {totalCompleted}</span>\n    </FilterLink>\n  </p>\n);\n\nexport default Footer;\n","import { connect } from 'react-redux';\nimport Footer from '../components/Footer';\n\nconst mapStateToProps = state => {\n  return {\n    total: state.todos.length,\n    totalActive: state.todos.filter(t => !t.completed).length,\n    totalCompleted: state.todos.filter(t => t.completed).length,\n  }\n}\n\nconst TodoCounting = connect(mapStateToProps)(Footer);\n\nexport default TodoCounting;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddTodo from './containers/AddTodo';\nimport VisibleTodoList from './containers/VisibleTodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport TodoCounting from './containers/TodoCounting';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AddTodo />\n      <VisibleTodoList />\n      <TodoCounting />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore }  from 'redux';\nimport todoApp from './reducers';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(todoApp);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}